require 'conf_conf'

# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause this
# file to always be loaded, without a need to explicitly require it in any files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, make a
# separate helper file that requires this one and then use it only in the specs
# that actually need it.
#
# The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
# The settings below are suggested to provide a good initial experience
# with RSpec, but feel free to customize to your heart's content.
=begin
  # These two settings work together to allow you to limit a spec run
  # to individual examples or groups you care about by tagging them with
  # `:focus` metadata. When nothing is tagged with `:focus`, all examples
  # get run.
  config.filter_run :focus
  config.run_all_when_everything_filtered = true

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = 'doc'
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  config.profile_examples = 10

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed

  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # Enable only the newer, non-monkey-patching expect syntax.
    # For more details, see:
    #   - http://myronmars.to/n/dev-blog/2012/06/rspecs-new-expectation-syntax
    expectations.syntax = :expect
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Enable only the newer, non-monkey-patching expect syntax.
    # For more details, see:
    #   - http://teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/
    mocks.syntax = :expect

    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended.
    mocks.verify_partial_doubles = true
  end
=end
end

class MockStore < Struct.new(:path)
  def write(data)
    @data = data
  end

  def read
    @data
  end
end

class MockFile
  @@fs = {}

  def self.write(path, content)
    @@fs[path] = content
  end

  def self.read(path)
    if @@fs[path]
      @@fs[path]
    else
      raise Errno::ENOENT.new("No such file or directory - #{path}")
    end
  end

  def self.fs
    @@fs
  end

  def self.exists?(path)
    !@@fs[path].nil?
  end

  def self.expand_path(path, *args)
    path
  end

  def self.join(*parts)
    parts.join('/')
  end

  def self.file?(path)
    false
  end

  def self.directory?(path)
    false
  end

  def self.dirname(path)
    parts = path.split('/')
    parts.pop
    parts.join('/')
  end
end

module MockRbNaCl
  def self.instance_index
    @instance_index ||= 0
    @instance_index += 1
  end

  class Info
    def initialize(content)
      @content = MultiJson.load(content)
    end

    def encrypted?
      secret_key_encrypted? || public_key_encrypted?
    end

    def secret_key_encrypted?
      !secret_key.nil? && !content.nil?
    end

    def public_key_encrypted?
      !content.nil? && !public_key.nil? && !private_key.nil?
    end

    def content
      @content['content']
    end

    def public_key
      @content['public_key']
    end

    def private_key
      @content['private_key']
    end

    def secret_key
      @content['secret_key']
    end
  end

  def encrypted_content_details(content)
    MultiJson.load(content)
  end

  class Random
    def self.random_bytes(length)
      "rand-#{length}"
    end
  end

  class SecretBox
    def self.key_bytes
      32
    end
  end

  class Key
    def to_s
      @key_to_s ||= [self.class.name.to_s,
        MockRbNaCl.instance_index.to_s].join('-')
    end
  end

  class PrivateKey < Key
    def self.generate
      PrivateKey.new
    end

    def public_key
      @public_key ||= Key.new
    end
  end

  class SimpleBox
    attr_accessor :public_key, :private_key, :secret_key

    def self.from_keypair(public_key, private_key)
      box = SimpleBox.new
      box.public_key = public_key
      box.private_key = private_key
      box
    end

    def self.from_secret_key(secret_key)
      box = SimpleBox.new
      box.secret_key = secret_key
      box
    end

    def encrypt(content)
      MultiJson.dump({
        public_key: self.public_key,
        private_key: self.private_key,
        secret_key: self.secret_key,
        content: content
      }.delete_if { |k,v| v.nil?  })
    end

    def decrypt(content)
      decoded = MultiJson.load(content)
      decoded['content']
    end
  end
end
